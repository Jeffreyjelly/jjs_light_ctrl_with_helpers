blueprint:
  name: "⚡\U0001F4A1 JJs Light Control With Helpers \U0001F4A1⚡"
  description: "# JJs Light Control With Helpers\n
    **Version: 1.3.14**\n
    ## Light control automation that has:\n
    - Two light scenes, one for day and night\n
    - Wont override the current light state if manually changed\n
    - Dims to show the lights are about to turn off\n
    - Time period after lights are off and motion is active to recover the last light
    state.\n
    - Fully customizable with the helpers\n
    - Controllable via other automations via using the helpers called with the blueprint\n
    ### Required helpers list\n
    Required = *\n
    - Please see the [readme.md](https://github.com/Jeffreyjelly/jjs_light_ctrl_with_helpers/blob/main/README.md)\n"
  domain: automation
  author: Jeffreyjelly
  homeassistant:
    min_version: '2025.1.0'
  input:
    light_settings:
      collapsed: true
      name: Lights Targeted and Scenes *
      icon: mdi:lightbulb-auto
      description: 'lights affected by this automation and the scenes to support those lights

        '
      input:
        light_target:
          name: Light
          description: "### \U0001F4A1\n- Light or Light Group to Target"
          default: []
          selector:
            entity:
              domain:
                - light
              multiple: false
        scene_day_light:
          name: Day scene
          description: "### \U0001F31E\U0001F3A8\n- scene for the day setting."
          default: []
          selector:
            entity:
              domain:
                - scene
              multiple: false
        scene_night_light:
          name: Night scene for the lights.
          description: "### \U0001F319\U0001F3A8\n- scene for the night setting."
          default: []
          selector:
            entity:
              domain:
                - scene
              multiple: false
    trigger_settings:
      collapsed: true
      name: Triggers for on an off *
      icon: mdi:motion-sensor
      description: 'Motion devices used to trigger and to sense motion is gone.

        '
      input:
        motion_detected_device:
          name: Motion detection
          description:
            "### \U0001F575️‍♂️\U0001F575️‍♀️\n- A binary_sensor input that
            triggers the lights to turn on."
          default: []
          selector:
            entity:
              domain:
                - binary_sensor
              multiple: false
        motion_not_detected_device:
          name: Motion not detected
          description:
            "### \U0001F575️‍♀️⛔ ⛔\U0001F575️‍♂️\n- A binary_sensor that when
            triggered off starts the first motion to dim timer.\n- Also will only
            work to keep lights on if either of the two timers are active when this
            gets turned to on again. "
          default: []
          selector:
            entity:
              domain:
                - binary_sensor
              multiple: false
    timer_settings:
      collapsed: true
      name: timers for the automation to run *
      icon: mdi:timer-edit
      description: "Input helper timers for the automation to run.\n
        Warning: These must not match other automation timers!"
      input:
        timer_on_to_dim:
          name: Timer for motion stopped to dim
          description:
            "### ⏲\U0001F315>\U0001F313\n- Timer used from no motion to dimmed
            state that is set via the automation."
          default: []
          selector:
            entity:
              domain:
                - timer
              multiple: false
        timer_dim_to_off:
          name: Timer for dimmed to off
          description:
            "### ⏲\U0001F313>\U0001F311\n- Timer used from dimmed to off state
            that is set via the automation.\n- Also used for time to recover last
            on state before reverting to scene on the next turn on. "
          default: []
          selector:
            entity:
              domain:
                - timer
              multiple: false
    number_settings:
      collapsed: true
      name: Input number settings
      icon: mdi:numeric
      description: 'Input numbers the automation settings.
        These

        '
      input:
        in_num_dim_amt:
          name: Light dimming value (optional input_number helper)
          description:
            "### \U0001F315>\U0001F313%❔\n- input_number helper for choosing
            how much the lights dim\n- suggested range:\n> (0 to 255) "
          default: []
          selector:
            entity:
              domain:
                - input_number
              multiple: false
        in_num_dim_amt_constant:
          name: Light dimming value (used if no helper listed)
          description:
            "### \U0001F315>\U0001F313%❔\n- Number for choosing
            how much the lights dim\n- range:\n> (0 to 255) "
          default: 128
          selector:
            number:
              min: 0
              max: 255
              step: 1
        in_num_on_light_day:
          name: No motion to dim in seconds day (optional input_number helper)
          description:
            "### ⛔\U0001F575️‍♂️>\U0001F313⏲\U0001F31E\n- input_number helper
            for no motion to dim to set the timer during the day in seconds.\n-
            suggested range:\n> (20s to 7200s)\n> or otherwise 20 seconds to 2
            hours "
          default: []
          selector:
            entity:
              domain:
                - input_number
              multiple: false
        in_num_on_light_day_constant:
          name: No motion to dim in seconds day (used if no helper listed)
          description:
            "### ⛔\U0001F575️‍♂️>\U0001F313⏲\U0001F31E\n- Number 
            for no motion to dim to set the timer during the day in seconds.\n-
            Range:\n> (20s to 7200s)\n> or otherwise 20 seconds to 2
            hours "
          default: 900
          selector:
            number:
              min: 20
              max: 7200
              step: 1
        in_num_on_light_night:
          name: No motion to dim in seconds night (optional input_number helper)
          description:
            "### ⛔\U0001F575️‍♂️>\U0001F313⏲\U0001F319\n- input_number helper
            for no motion to dim to set the timer during the night in seconds.\n-
            suggested range:\n> (20s to 7200s)\n> or otherwise 20 seconds to 2
            hours "
          default: []
          selector:
            entity:
              domain:
                - input_number
              multiple: false
        in_num_on_light_night_constant:
          name: No motion to dim in seconds night (used if no helper listed)
          description:
            "### ⛔\U0001F575️‍♂️>\U0001F313⏲\U0001F319\n- Number
            for no motion to dim to set the timer during the night in seconds.\n-
            Range:\n> (20s to 7200s)\n> or otherwise 20 seconds to 2 hours "
          default: 300
          selector:
            number:
              min: 20
              max: 7200
              step: 1
        in_num_dim_light_day:
          name: Dimmed to off in seconds day (optional input_number helper)
          description:
            "### \U0001F313>\U0001F311⏲\U0001F31E\n- input_number helper for
            dimmed to off to set the timer during the day in seconds.\n- suggested
            range:\n> (10s to 1800s)\n> or otherwise 10 seconds to 30 minutes "
          default: []
          selector:
            entity:
              domain:
                - input_number
              multiple: false
        in_num_dim_light_day_constant:
          name: Dimmed to off in seconds day (used if no helper listed)
          description:
            "### \U0001F313>\U0001F311⏲\U0001F31E\n- Number for
            dimmed to off to set the timer during the day in seconds.\n- 
            Range:\n> (10s to 1800s)\n> or otherwise 10 seconds to 30 minutes "
          default: 300
          selector:
            number:
              min: 10
              max: 1800
              step: 1
        in_num_dim_light_night:
          name: Dimmed to off in seconds night (optional input_number helper)
          description:
            "### \U0001F313>\U0001F311⏲\U0001F319\n- input_number helper for
            dimmed to off to set the timer during the night in seconds.\n-
            suggested range:\n> (10s to 1800s)\n> or otherwise 10 seconds to 30
            minutes "
          default: []
          selector:
            entity:
              domain:
                - input_number
              multiple: false
        in_num_dim_light_night_constant:
          name: Dimmed to off in seconds night (used if no helper listed)
          description:
            "### \U0001F313>\U0001F311⏲\U0001F319\n- Number for
            dimmed to off to set the timer during the night in seconds.\n-
            Range:\n> (10s to 1800s)\n> or otherwise 10 seconds to 30
            minutes "
          default: 120
          selector:
            number:
              min: 10
              max: 1800
              step: 1
        in_num_transition_time:
          name: Light on transition time normal (optional input_number helper)
          description: "### \U0001F4A1\U0001F199⏳\n- input_number helper for light
            transitioning on and off in seconds\n- suggested range:\n> (1s to 10s) "
          default: []
          selector:
            entity:
              domain:
                - input_number
              multiple: false
        in_num_transition_time_constant:
          name: Light on transition time normal (used if no helper listed)
          description: "### \U0001F4A1\U0001F199⏳\n- Number for light
            transitioning on and off in seconds\n- Range:\n> (1s to 10s) "
          default: 3
          selector:
            number:
              min: 1
              max: 10
              step: 1
        in_num_transition_time_fast:
          name: Light on transition time fast (optional input_number helper)
          description:
            "### \U0001F4A1\U0001F199⏳⏩\n- input_number helper for light
            transitioning to and from dimmed states in seconds. (you&rsquo;ll want
            this fast to see the transition)\n- suggested range:\n> (1s to 3s) "
          default: []
          selector:
            entity:
              domain:
                - input_number
              multiple: false
        in_num_transition_time_fast_constant:
          name: Light on transition time fast (used if no helper listed)
          description:
            "### \U0001F4A1\U0001F199⏳⏩\n- Number for light
            transitioning to and from dimmed states in seconds. (you&rsquo;ll want
            this fast to see the transition)\n- Range:\n> (1s to 3s) "
          default: 1
          selector:
            number:
              min: 1
              max: 3
              step: 1
        in_num_hold_scene:
          name: Time to hold temporary scene (optional input_number helper)
          description: "### ⌚🎨🎈\n- input_number helper to adjust for how
            long to hold the temporary scene that is saved in seconds.\n- suggested
            range:\n> (10s to 1800s)\n> or otherwise 10 seconds to 30
            minutes "
          default: []
          selector:
            entity:
              domain:
                - input_number
              multiple: false
        in_num_hold_scene_constant:
          name: Time to hold temporary scene (used if no helper listed)
          description: "### ⌚🎨🎈\n- Number to adjust for how
            long to hold the temporary scene that is saved in seconds.\n- 
            Range:\n> (10s to 1800s)\n> or otherwise 10 seconds to 30
            minutes "
          default: 1800
          selector:
            number:
              min: 10
              max: 1800
              step: 1
    datetime_settings:
      collapsed: true
      name: datetime settings
      icon: mdi:clipboard-text-clock-outline
      description: 'datetime settings.

        '
      input:
        in_datetime_day_time:
          name: Datetime start for day scene (optional input_number helper)
          description:
            "### \U0001F4C5⌚\U0001F31E\n- input_datetime helper start time
            for activating the day scene."
          default: []
          selector:
            entity:
              domain:
                - input_datetime
              multiple: false
        in_datetime_day_time_constant:
          name: Datetime start for day scene (used if no helper listed)
          description:
            "### \U0001F4C5⌚\U0001F31E\n- Start time
            for activating the day scene."
          default: "06:30:00"
          selector:
            time: {}
        in_datetime_night_time:
          name: Datetime start for night scene
          description:
            "### \U0001F4C5⌚\U0001F319\n- input_datetime helper start time
            for activating the night scene."
          default: []
          selector:
            entity:
              domain:
                - input_datetime
              multiple: false
        in_datetime_night_time_constant:
          name: Datetime start for night scene
          description:
            "### \U0001F4C5⌚\U0001F319\n- Start time
            for activating the night scene."
          default: "24:00:00"
          selector:
            time: {}
    boolean_settings:
      name: Automation logic settings
      icon: mdi:toggle-switch
      description: 'Automation boolean settings.

        '
      collapsed: true
      input:
        in_bool_auto_enable:
          name: Input boolean enable (true if left empty)
          description:
            "### \U0001F51B\n- input_boolean helper for enabling and disabling
            this automation"
          default: []
          selector:
            entity:
              domain:
                - input_boolean
              multiple: false
  source_url: https://github.com/Jeffreyjelly/jjs_light_ctrl_with_helpers/blob/main/blueprints/JJs_light_ctrl_w_helpers/JJs_light_ctrl_w_helpers.yaml
mode: restart
max_exceeded: silent
variables:
  light_target_ent: !input light_target
  in_num_dim_amt_ent: >-
    {% if (in_num_dim_amt | length > 0) %}
      {{ in_num_dim_amt | int }}
    {% else %}
      {{ in_num_dim_amt_constant | int }}
    {% endif %}
  in_num_on_light_day_ent: >-
    {% if (in_num_on_light_day | length > 0) %}
      {{ in_num_on_light_day | int }}
    {% else %}
      {{ in_num_on_light_day_constant | int }}
    {% endif %}
  in_num_on_light_night_ent: >-
    {% if (in_num_on_light_night | length > 0) %}
      {{ in_num_on_light_night | int }}
    {% else %}
      {{ in_num_on_light_night_constant | int }}
    {% endif %}
  in_num_dim_light_day_ent: >-
    {% if (in_num_dim_light_day | length > 0) %}
      {{ in_num_dim_light_day | int }}
    {% else %}
      {{ in_num_dim_light_day_constant | int }}
    {% endif %}
  in_num_dim_light_night_ent: >-
    {% if (in_num_dim_light_night | length > 0) %}
      {{ in_num_dim_light_night | int }}
    {% else %}
      {{ in_num_dim_light_night_constant | int }}
    {% endif %}
  in_num_transition_time_ent: >-
    {% if (in_num_transition_time | length > 0) %}
      {{ in_num_transition_time | int }}
    {% else %}
      {{ in_num_transition_time_constant | int }}
    {% endif %}
  in_num_transition_time_fast_ent: >-
    {% if (in_num_transition_time_fast | length > 0) %}
      {{ in_num_transition_time_fast | int }}
    {% else %}
      {{ in_num_transition_time_fast_constant | int }}
    {% endif %}
  in_num_hold_scene_ent: >-
    {% if (in_num_hold_scene | length > 0) %}
      {{ in_num_hold_scene | int }}
    {% else %}
      {{ in_num_hold_scene_constant | int }}
    {% endif %}
  # create the temp scene name based off this automation's ID
  temp_scene_name_ent: >-
    jjs_recovery_scene_for_zone_{{ this.entity_id.split('.')[-1] }}
  in_datetime_day_time_ent: >-
    {% if in_datetime_day_time | length > 0 %}
      {{ states(in_datetime_day_time) }}
    {% else %}
      {{ in_datetime_day_time_constant }}
    {% endif %}
  in_datetime_night_time_ent: >-
    {% if in_datetime_night_time | length > 0 %}
      {{ states(in_datetime_night_time) }}
    {% else %}
      {{ in_datetime_night_time_constant }}
    {% endif %}
  in_bool_auto_enable_ent: >-
    {% if (in_bool_auto_enable | length > 0) %}
      {{ in_bool_auto_enable }}
    {% else %}
      true
    {% endif %}
  #active_lights helps to only turn on or only dim lights that were on already for the on > dim or also off > on (preserved scene)
  active_lights: >-
    {{ expand(light_target)
       | selectattr('state', 'eq', 'on')
       | map(attribute='entity_id')
       | list }}
  same_timer_check: "{{ timer_on_to_dim == timer_dim_to_off }}"
# alias: JJs light ctrl with helpers
trigger:
  - platform: state
    entity_id: !input motion_detected_device
    from: "off"
    to: "on"
    id: motion_detected
    alias: motion_detected_device > motion_detected
  - platform: state
    entity_id: !input motion_not_detected_device
    to: "off"
    id: motion_stopped
    alias: motion_not_detected_device > motion_stopped
  - platform: state
    entity_id: !input motion_not_detected_device
    to: "on"
    id: motion_stopped_canceled
    alias: motion_not_detected_device > motion_stopped_canceled
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input timer_on_to_dim
    id: motion_stopped_to_dim
    alias: timer_on_to_dim finished > motion_stopped_to_dim
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input timer_dim_to_off
    id: motion_stopped_to_off
    alias: timer_dim_to_off finished > motion_stopped_to_off
  - platform: state
    entity_id:
      - !input light_target
    to: "off"
    id: manual_off
condition: []
action:
  # - choose:
  #   - conditions:
  #     - condition: template
  #       value_template: "{{ not same_timer_check }}"
  #     sequence:
  #       - service: persistent_notification.create
  #         data:
  #           title: "Blueprint Setup Error"
  #           message: "You cannot use the same timer for both timer_on_to_dim and timer_dim_to_off."
  #       - stop: "Same timers detected. Stopping automation."
  #   - default:
  - if:
      - condition: template
        value_template: >
          {% if in_bool_auto_enable | length > 0 %}
            {{ is_state(in_bool_auto_enable, "on") }}
          {% else %}
            true
          {% endif %}
    then:
      - choose:
          - conditions:
              - condition: trigger
                id: motion_detected
            sequence:
              - if:
                  - condition: and
                    conditions:
                      - condition: state
                        entity_id: !input light_target
                        state: "off"
                      #removing in case if the user manually turn off the lights while the first timer was active
                      # - condition: state
                      #   entity_id: !input timer_on_to_dim
                      #   state: idle
                      - condition: state
                        entity_id: !input timer_dim_to_off
                        state: idle
                # if lights are off and no timers are active
                then:
                  - if:
                      - condition: template
                        # Daytime condition:
                        # This template checks if the current time is between 'day_time' and 'night_time'.
                        # It also works when the range crosses midnight. Example:
                        #   - day_time: 07:00:00, night_time: 22:00:00 → checks 07:00–22:00 normally.
                        #   - day_time: 22:00:00, night_time: 07:00:00 → checks overnight range, e.g., 23:00 or 03:00 is "day".
                        value_template: >
                          {% set night_time = strptime(states(in_datetime_night_time_ent), "%H:%M:%S").time() %}
                          {% set day_time = strptime(states(in_datetime_day_time_ent), "%H:%M:%S").time() %}
                          {% set now_time = now().time() %}

                          {{
                            (day_time <= now_time <= night_time)
                            if day_time < night_time
                            else (now_time >= day_time or now_time <= night_time)
                          }}
                        alias: Time condition day
                    then:
                      - service: scene.turn_on
                        target:
                          entity_id: !input scene_day_light
                        data:
                          transition: "{{states(in_num_transition_time_ent) | int }}"
                        metadata: {}
                    else:
                      - if:
                          - condition: template
                            # Nighttime condition:
                            # Similar logic to daytime, but flipped — checks if now is between 'night_time' and 'day_time'.
                            # Also supports ranges that cross midnight, e.g., 22:00–07:00.
                            value_template: >
                              {% set night_time = strptime(states(in_datetime_night_time_ent), "%H:%M:%S").time() %}
                              {% set day_time = strptime(states(in_datetime_day_time_ent), "%H:%M:%S").time() %}
                              {% set now_time = now().time() %}

                              {{
                                (night_time <= now_time <= day_time)
                                if night_time < day_time
                                else (now_time >= night_time or now_time <= day_time)
                              }}
                            alias: Time condition night
                        then:
                          - service: scene.turn_on
                            target:
                              entity_id: !input scene_night_light
                            data:
                              transition: "{{ states(in_num_transition_time_ent)| int }}"
                            metadata: {}
                        alias: Night path
                    alias: Set light scene since lights were off
                # if the timer dim_to_off is on but lights are off return to the saved light scene
                else:
                  - if:
                      - condition: state
                        entity_id: !input timer_dim_to_off
                        state: active
                    then:
                      - service: scene.turn_on
                        data:
                          transition: "{{ states(in_num_transition_time_fast_ent) | int }}"
                        target:
                          entity_id:
                            - scene.{{ temp_scene_name_ent }}
                      - service: timer.cancel
                        data: {}
                        target:
                          entity_id: !input timer_dim_to_off
                    alias:
                      if timer dim_to_off is active revert to saved scene else, clear out
                      the on_to_dim timer
                    else:
                      - service: timer.cancel
                        data: {}
                        target:
                          entity_id: !input timer_on_to_dim
                alias:
                  if all lights are off and all timers are idle set scene else, recover
                  scene
          - conditions:
              - condition: trigger
                id:
                  - motion_stopped
            #when motion stops and the timer_on_to_dim starts up
            sequence:
              - if:
                  - condition: template
                    # Daytime condition:
                    # This template checks if the current time is between 'day_time' and 'night_time'.
                    # It also works when the range crosses midnight. Example:
                    #   - day_time: 07:00:00, night_time: 22:00:00 → checks 07:00–22:00 normally.
                    #   - day_time: 22:00:00, night_time: 07:00:00 → checks overnight range, e.g., 23:00 or 03:00 is "day".
                    value_template: >
                      {% set night_time = strptime(states(in_datetime_night_time_ent), "%H:%M:%S").time() %}
                      {% set day_time = strptime(states(in_datetime_day_time_ent), "%H:%M:%S").time() %}
                      {% set now_time = now().time() %}

                      {{
                        (day_time <= now_time <= night_time)
                        if day_time < night_time
                        else (now_time >= day_time or now_time <= night_time)
                      }}
                    alias: Time condition day
                then:
                  - service: timer.start
                    data:
                      duration:
                        "{{ (states(in_num_on_light_day_ent)|int )|timestamp_custom('%H:%M:%S',
                        false) }}"
                    target:
                      entity_id: !input timer_on_to_dim
                else:
                  - if:
                      - condition: template
                        # Nighttime condition:
                        # Similar logic to daytime, but flipped — checks if now is between 'night_time' and 'day_time'.
                        # Also supports ranges that cross midnight, e.g., 22:00–07:00.
                        value_template: >
                          {% set night_time = strptime(states(in_datetime_night_time_ent), "%H:%M:%S").time() %}
                          {% set day_time = strptime(states(in_datetime_day_time_ent), "%H:%M:%S").time() %}
                          {% set now_time = now().time() %}

                          {{
                            (night_time <= now_time <= day_time)
                            if night_time < day_time
                            else (now_time >= night_time or now_time <= day_time)
                          }}
                        alias: Time condition night
                    then:
                      - service: timer.start
                        data:
                          duration:
                            "{{ (states(in_num_on_light_night_ent)|int)|timestamp_custom('%H:%M:%S',
                            false) }}"
                        target:
                          entity_id: !input timer_on_to_dim
                    alias: Night condition
                alias: startup on_to_dim timer based on day
          - conditions:
              - condition: trigger
                id:
                  - motion_stopped_canceled
            #when the sensor that keeps the lights on senses motion
            sequence:
              - if:
                  - condition: state
                    entity_id: !input timer_dim_to_off
                    state: active
                then:
                  - service: scene.turn_on
                    data:
                      transition: "{{ states(in_num_transition_time_fast_ent) | int }}"
                    target:
                      entity_id:
                        - scene.{{ temp_scene_name_ent }}
                  - service: timer.cancel
                    data: {}
                    target:
                      entity_id: !input timer_dim_to_off
                alias:
                  if timer dim_to_off is active revert to saved scene and cancel timer
                  else, cancel the on_to_dim timer
                else:
                  - service: timer.cancel
                    data: {}
                    target:
                      entity_id: !input timer_on_to_dim
          - conditions:
              - condition: trigger
                id:
                  - motion_stopped_to_dim
            #when the timer_on_to_dim finishes execute code below
            sequence:
              - if:
                  - condition: and
                    conditions:
                      - condition: state
                        entity_id: !input light_target
                        state: "on"
                      - condition: state
                        entity_id: !input timer_on_to_dim
                        state: idle
                then:
                  - service: scene.create
                    data:
                      # snapshot_entities: !input light_target
                      #attempting to preserve only the lights that were on for scenes where some are off
                      snapshot_entities: "{{ active_lights }}"
                      scene_id: "{{ temp_scene_name_ent }}"
                    enabled: true
                  - if:
                      - condition: template
                        value_template: |-
                          {% if state_attr(light_target_ent,'brightness') != none %}
                          True
                          {% endif %}
                    then:
                      - if:
                          - condition: template
                            value_template: >-
                              {% if int(states(in_num_dim_amt_ent)) >
                              state_attr(light_target_ent,'brightness') %} True {% endif %}
                        then:
                          - service: light.turn_on
                            data:
                              brightness_step: >-
                                {{ (((state_attr(light_target_ent,'brightness')|int(0)) * -1) + 5) }}
                              transition: "{{ states(in_num_transition_time_fast_ent) | int }}"
                            target:
                              # entity_id: !input light_target
                              #hoping that using active lights here will not turn on extra lights
                              entity_id: "{{ active_lights }}"
                        else:
                          - service: light.turn_on
                            data:
                              brightness_step: "{{ ((states(in_num_dim_amt_ent)|int)*-1) }}"
                              transition: "{{ states(in_num_transition_time_fast_ent) | int }}"
                            target:
                              # entity_id: !input light_target
                              #hoping that using active lights here will not turn on extra lights
                              entity_id: "{{ active_lights }}"
                  - if:
                      - condition: template
                        # Daytime condition:
                        # This template checks if the current time is between 'day_time' and 'night_time'.
                        # It also works when the range crosses midnight. Example:
                        #   - day_time: 07:00:00, night_time: 22:00:00 → checks 07:00–22:00 normally.
                        #   - day_time: 22:00:00, night_time: 07:00:00 → checks overnight range, e.g., 23:00 or 03:00 is "day".
                        value_template: >
                          {% set night_time = strptime(states(in_datetime_night_time_ent), "%H:%M:%S").time() %}
                          {% set day_time = strptime(states(in_datetime_day_time_ent), "%H:%M:%S").time() %}
                          {% set now_time = now().time() %}

                          {{
                            (day_time <= now_time <= night_time)
                            if day_time < night_time
                            else (now_time >= day_time or now_time <= night_time)
                          }}
                        alias: Time condition day
                    then:
                      - service: timer.start
                        data:
                          duration:
                            "{{ (states(in_num_dim_light_day_ent)|int)|timestamp_custom('%H:%M:%S',
                            false) }}"
                        target:
                          entity_id: !input timer_dim_to_off
                    else:
                      - if:
                          - condition: template
                            # Nighttime condition:
                            # Similar logic to daytime, but flipped — checks if now is between 'night_time' and 'day_time'.
                            # Also supports ranges that cross midnight, e.g., 22:00–07:00.
                            value_template: >
                              {% set night_time = strptime(states(in_datetime_night_time_ent), "%H:%M:%S").time() %}
                              {% set day_time = strptime(states(in_datetime_day_time_ent), "%H:%M:%S").time() %}
                              {% set now_time = now().time() %}

                              {{
                                (night_time <= now_time <= day_time)
                                if night_time < day_time
                                else (now_time >= night_time or now_time <= day_time)
                              }}
                            alias: Time condition night
                        then:
                          - service: timer.start
                            data:
                              duration:
                                "{{ (states(in_num_dim_light_night_ent)|int)|timestamp_custom('%H:%M:%S',
                                false) }}"
                            target:
                              entity_id: !input timer_dim_to_off
                        alias: Night condition
                enabled: true
          - conditions:
              - condition: trigger
                id:
                  - motion_stopped_to_off
            #when the timer_dim_to_off finishes for both the lights being dim and for the duration after the lights are off
            sequence:
              - if:
                  - condition: and
                    conditions:
                      - condition: state
                        entity_id: !input light_target
                        state: "on"
                then:
                  - service: light.turn_off
                    data:
                      transition: "{{ states(in_num_transition_time_ent) | int }}"
                    target:
                      entity_id: !input light_target
                  - if:
                      - condition: template
                        # Daytime condition:
                        # This template checks if the current time is between 'day_time' and 'night_time'.
                        # It also works when the range crosses midnight. Example:
                        #   - day_time: 07:00:00, night_time: 22:00:00 → checks 07:00–22:00 normally.
                        #   - day_time: 22:00:00, night_time: 07:00:00 → checks overnight range, e.g., 23:00 or 03:00 is "day".
                        value_template: >
                          {% set night_time = strptime(states(in_datetime_night_time_ent), "%H:%M:%S").time() %}
                          {% set day_time = strptime(states(in_datetime_day_time_ent), "%H:%M:%S").time() %}
                          {% set now_time = now().time() %}

                          {{
                            (day_time <= now_time <= night_time)
                            if day_time < night_time
                            else (now_time >= day_time or now_time <= night_time)
                          }}
                        alias: Time condition day
                    then:
                      - service: timer.start
                        data:
                          duration:
                            "{{ (states(in_num_hold_scene_ent)|int)|timestamp_custom('%H:%M:%S',
                            false) }}"
                        target:
                          entity_id: !input timer_dim_to_off
                    else:
                      - if:
                          - condition: template
                            # Nighttime condition:
                            # Similar logic to daytime, but flipped — checks if now is between 'night_time' and 'day_time'.
                            # Also supports ranges that cross midnight, e.g., 22:00–07:00.
                            value_template: >
                              {% set night_time = strptime(states(in_datetime_night_time_ent), "%H:%M:%S").time() %}
                              {% set day_time = strptime(states(in_datetime_day_time_ent), "%H:%M:%S").time() %}
                              {% set now_time = now().time() %}

                              {{
                                (night_time <= now_time <= day_time)
                                if night_time < day_time
                                else (now_time >= night_time or now_time <= day_time)
                              }}
                            alias: Time condition night
                        then:
                          - service: timer.start
                            data:
                              duration:
                                "{{ (states(in_num_hold_scene_ent)|int)|timestamp_custom('%H:%M:%S',
                                false) }}"
                            target:
                              entity_id: !input timer_dim_to_off
                        alias: Night condition
                enabled: true
                else:
                  - stop:
                      Stopped because last timer expired with lights off and this is the
                      end of the automation.
          - conditions:
              - condition: trigger
                id: manual_off
            sequence:
              - service: timer.cancel
                data: {}
                target:
                  entity_id:
                    - !input timer_on_to_dim
                    - !input timer_dim_to_off
    alias: if boolean for automation enable is on
