blueprint:
  name: "⚡\U0001F4A1 JJs Light Control With Helpers \U0001F4A1⚡"
  description: " ## Light control automation that has:

    - Two light scenes, one for day and night

    - Wont override the current light state if manually changed

    - Dims to show the lights are about to turn off

    - Time period after lights are off and motion is active to recover the last light
    state.

    - Fully customizable with the helpers

    - Controllable via other automations via using the helpers called with the blueprint


    ### Required helpers list

    - Please see the [readme.md](https://github.com/Jeffreyjelly/jjs_light_ctrl_with_helpers/blob/main/README.md) "
  domain: automation
  source_url: https://github.com/Jeffreyjelly/jjs_light_ctrl_with_helpers/blob/main/JJs_light_ctrl_w_helpers.yaml
  author: Jeffreyjelly
  input:
    light_target:
      name: Light
      description: "### \U0001F4A1\n- Light or Light Group to Target"
      selector:
        entity:
          domain:
            - light
          multiple: false
    in_bool_auto_enable:
      name: Input boolean enable
      description:
        "### \U0001F51B\n- input_boolean helper for enabling and disabling
        this automation"
      selector:
        entity:
          domain:
            - input_boolean
          multiple: false
    motion_detected_device:
      name: Motion detection
      description:
        "### \U0001F575️‍♂️\U0001F575️‍♀️\n- A binary_sensor input that
        triggers the lights to turn on."
      selector:
        entity:
          domain:
            - binary_sensor
          multiple: false
    motion_not_detected_device:
      name: Motion not detected
      description:
        "### \U0001F575️‍♀️⛔ ⛔\U0001F575️‍♂️\n- A binary_sensor that when
        triggered off starts the first motion to dim timer.\n- Also will only work
        to keep lights on if either of the two timers are active when this gets turned
        to on again. "
      selector:
        entity:
          domain:
            - binary_sensor
          multiple: false
    timer_on_to_dim:
      name: Timer for motion stopped to dim
      description:
        "### ⏲\U0001F315>\U0001F313\n- Timer used from no motion to dimmed
        state that is set via the automation."
      selector:
        entity:
          domain:
            - timer
          multiple: false
    timer_dim_to_off:
      name: Timer for dimmed to off
      description:
        "### ⏲\U0001F313>\U0001F311\n- Timer used from dimmed to off state
        that is set via the automation.\n- Also used for time to recover last on state
        before reverting to scene on the next turn on. "
      selector:
        entity:
          domain:
            - timer
          multiple: false
    in_num_dim_amt:
      name: Light dimming value
      description:
        "### \U0001F315>\U0001F313%❔\n- input_number helper for choosing
        how much the lights dim\n- suggested range:\n> (0 to 255) "
      selector:
        entity:
          domain:
            - input_number
          multiple: false
    in_num_on_light_day:
      name: No motion to dim in seconds day
      description:
        "### ⛔\U0001F575️‍♂️>\U0001F313⏲\U0001F31E\n- input_number helper
        for no motion to dim to set the timer during the day in seconds.\n- suggested
        range:\n> (20s to 7200s)\n> or otherwise 20 seconds to 2 hours "
      selector:
        entity:
          domain:
            - input_number
          multiple: false
    in_num_on_light_night:
      name: No motion to dim in seconds night
      description:
        "### ⛔\U0001F575️‍♂️>\U0001F313⏲\U0001F319\n- input_number helper
        for no motion to dim to set the timer during the night in seconds.\n- suggested
        range:\n> (20s to 7200s)\n> or otherwise 20 seconds to 2 hours "
      selector:
        entity:
          domain:
            - input_number
          multiple: false
    in_num_dim_light_day:
      name: Dimmed to off in seconds day
      description:
        "### \U0001F313>\U0001F311⏲\U0001F31E\n- input_number helper for
        dimmed to off to set the timer during the day in seconds.\n- suggested range:\n>
        (10s to 1800s)\n> or otherwise 10 seconds to 30 minutes "
      selector:
        entity:
          domain:
            - input_number
          multiple: false
    in_num_dim_light_night:
      name: Dimmed to off in seconds night
      description:
        "### \U0001F313>\U0001F311⏲\U0001F319\n- input_number helper for
        dimmed to off to set the timer during the night in seconds.\n- suggested range:\n>
        (10s to 1800s)\n> or otherwise 10 seconds to 30 minutes "
      selector:
        entity:
          domain:
            - input_number
          multiple: false
    in_num_transition_time:
      name: Light on transition time normal
      description:
        "### \U0001F4A1\U0001F199⏳\n- input_number helper for light transitioning
        on and off in seconds\n- suggested range:\n> (1s to 10s) "
      selector:
        entity:
          domain:
            - input_number
          multiple: false
    in_num_transition_time_fast:
      name: Light on transition time fast
      description:
        "### \U0001F4A1\U0001F199⏳⏩\n- input_number helper for light transitioning
        to and from dimmed states in seconds. (you&rsquo;ll want this fast to see
        the transition)\n- suggested range:\n> (1s to 3s) "
      selector:
        entity:
          domain:
            - input_number
          multiple: false
    in_datetime_day_time:
      name: Datetime start for day scene
      description:
        "### \U0001F4C5⌚\U0001F31E\n- input_datetime helper start time
        for activating the day scene selected below."
      selector:
        entity:
          domain:
            - input_datetime
          multiple: false
    in_datetime_night_time:
      name: Datetime start for night scene
      description:
        "### \U0001F4C5⌚\U0001F319\n- input_datetime helper start time
        for activating the day scene selected below."
      selector:
        entity:
          domain:
            - input_datetime
          multiple: false
    scene_day_light:
      name: Day scene
      description: "### \U0001F31E\U0001F3A8\n- scene for the day setting."
      selector:
        entity:
          domain:
            - scene
          multiple: false
    scene_night_light:
      name: Night scene for the lights.
      description: "### \U0001F319\U0001F3A8\n- scene for the night setting."
      selector:
        entity:
          domain:
            - scene
          multiple: false
    temp_scene_name:
      name: Temporary scene name
      description:
        "### \U0001F3A8\U0001F388\n- Temporary scene name that will be
        created to recover the last on state\n> (make sure it&rsquo;s unique and doesn&rsquo;t
        already exist) "
      default: jjs_recovery_scene_for_zone_
variables:
  light_target_ent: !input light_target
  in_num_dim_amt_ent: !input in_num_dim_amt
  in_num_on_light_day_ent: !input in_num_on_light_day
  in_num_on_light_night_ent: !input in_num_on_light_night
  in_num_dim_light_day_ent: !input in_num_dim_light_day
  in_num_dim_light_night_ent: !input in_num_dim_light_night
  in_num_transition_time_ent: !input in_num_transition_time
  in_num_transition_time_fast_ent: !input in_num_transition_time_fast
  temp_scene_name_ent: !input temp_scene_name
alias: JJs light ctrl with helpers
description: ""
trigger:
  - platform: state
    entity_id: !input motion_detected_device
    from: "off"
    to: "on"
    id: motion_detected
    alias: motion_detected_device > motion_detected
  - platform: state
    entity_id: !input motion_not_detected_device
    to: "off"
    id: motion_stopped
    alias: motion_not_detected_device  > motion_stopped
  - platform: state
    entity_id: !input motion_not_detected_device
    to: "on"
    id: motion_stopped_canceled
    alias: motion_not_detected_device > motion_stopped_canceled
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input timer_on_to_dim
    id: motion_stopped_to_dim
    alias: timer_on_to_dim finished > motion_stopped_to_dim
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input timer_dim_to_off
    id: motion_stopped_to_off
    alias: timer_dim_to_off finished > motion_stopped_to_off
  - platform: state
    entity_id:
      - !input light_target
    to: "off"
    id: manual_off
condition: []
action:
  - if:
      - condition: state
        entity_id: !input in_bool_auto_enable
        state: "on"
    then:
      - choose:
          - conditions:
              - condition: trigger
                id: motion_detected
            sequence:
              - if:
                  - condition: and
                    conditions:
                      - condition: state
                        entity_id: !input light_target
                        state: "off"
                      #removing in case if the user manually turn off the lights while the first timer was active
                      # - condition: state
                      #   entity_id: !input timer_on_to_dim
                      #   state: idle
                      - condition: state
                        entity_id: !input timer_dim_to_off
                        state: idle
                # if lights are off and no timers are active
                then:
                  - if:
                      - condition: time
                        before: !input in_datetime_night_time
                        after: !input in_datetime_day_time
                        alias: Time condition day
                    then:
                      - service: scene.turn_on
                        target:
                          entity_id: !input scene_day_light
                        data:
                          transition: "{{states(in_num_transition_time_ent) | int }}"
                        metadata: {}
                    else:
                      - if:
                          - condition: time
                            before: !input in_datetime_day_time
                            after: !input in_datetime_night_time
                            alias: Time condition night
                        then:
                          - service: scene.turn_on
                            target:
                              entity_id: !input scene_night_light
                            data:
                              transition: "{{ states(in_num_transition_time_ent)| int }}"
                            metadata: {}
                        alias: Night path
                    alias: Set light scene since lights were off
                # if the timer dim_to_off is on but lights are off return to the saved light scene
                else:
                  - if:
                      - condition: state
                        entity_id: !input timer_dim_to_off
                        state: active
                    then:
                      - service: scene.turn_on
                        data:
                          transition: "{{ states(in_num_transition_time_fast_ent) | int }}"
                        target:
                          entity_id:
                            - scene.{{ temp_scene_name_ent }}
                      - service: timer.cancel
                        data: {}
                        target:
                          entity_id: !input timer_dim_to_off
                    alias:
                      if timer dim_to_off is active revert to saved scene else, clear out
                      the on_to_dim timer
                    else:
                      - service: timer.cancel
                        data: {}
                        target:
                          entity_id: !input timer_on_to_dim
                alias:
                  if all lights are off and all timers are idle set scene else, recover
                  scene
          - conditions:
              - condition: trigger
                id:
                  - motion_stopped
            sequence:
              - if:
                  - condition: time
                    before: !input in_datetime_night_time
                    after: !input in_datetime_day_time
                    alias: Time condition day
                then:
                  - service: timer.start
                    data:
                      duration:
                        "{{ (states(in_num_on_light_day_ent)|int )|timestamp_custom('%H:%M:%S',
                        false) }}"
                    target:
                      entity_id: !input timer_on_to_dim
                else:
                  - if:
                      - condition: time
                        before: !input in_datetime_day_time
                        after: !input in_datetime_night_time
                        alias: Time condition night
                    then:
                      - service: timer.start
                        data:
                          duration:
                            "{{ (states(in_num_on_light_night_ent)|int)|timestamp_custom('%H:%M:%S',
                            false) }}"
                        target:
                          entity_id: !input timer_on_to_dim
                    alias: Night condition
                alias: startup on_to_dim timer based on day
          - conditions:
              - condition: trigger
                id:
                  - motion_stopped_canceled
            sequence:
              - if:
                  - condition: state
                    entity_id: !input timer_dim_to_off
                    state: active
                then:
                  - service: scene.turn_on
                    data:
                      transition: "{{ states(in_num_transition_time_fast_ent) | int }}"
                    target:
                      entity_id:
                        - scene.{{ temp_scene_name_ent }}
                  - service: timer.cancel
                    data: {}
                    target:
                      entity_id: !input timer_dim_to_off
                alias:
                  if timer dim_to_off is active revert to saved scene and cancel timer
                  else, cancel the on_to_dim timer
                else:
                  - service: timer.cancel
                    data: {}
                    target:
                      entity_id: !input timer_on_to_dim
          - conditions:
              - condition: trigger
                id:
                  - motion_stopped_to_dim
            sequence:
              - if:
                  - condition: and
                    conditions:
                      - condition: state
                        entity_id: !input light_target
                        state: "on"
                      - condition: state
                        entity_id: !input timer_on_to_dim
                        state: idle
                then:
                  - service: scene.create
                    data:
                      snapshot_entities: !input light_target
                      scene_id: !input temp_scene_name
                    enabled: true
                  - delay:
                      hours: 0
                      minutes: 0
                      seconds: 0
                      milliseconds: 10
                  - if:
                      - condition: template
                        value_template: |-
                          {% if state_attr(light_target_ent,'brightness') != none %}
                          True
                          {% endif %}
                    then:
                      - if:
                          - condition: template
                            value_template: >-
                              {% if int(states(in_num_dim_amt_ent)) >
                              state_attr(light_target_ent,'brightness') %} True {% endif %}
                        then:
                          - service: light.turn_on
                            data:
                              brightness_step: >-
                                {{ (((state_attr(light_target_ent,'brightness')|int(0)) * -1) + 5) }}
                              transition: "{{ states(in_num_transition_time_fast_ent) | int }}"
                            target:
                              entity_id: !input light_target
                        else:
                          - service: light.turn_on
                            data:
                              brightness_step: "{{ ((states(in_num_dim_amt_ent)|int)*-1) }}"
                              transition: "{{ states(in_num_transition_time_fast_ent) | int }}"
                            target:
                              entity_id: !input light_target
                  # - service: light.turn_on
                  #   data:
                  #     brightness_step_pct: "{{ ((states(in_num_dim_amt_ent) | int) / 255 * -100) | int }}"
                  #     transition: "{{ states(in_num_transition_time_fast_ent) | int }}"
                  #   target:
                  #     entity_id: !input light_target
                  # - delay:
                  #     hours: 0
                  #     minutes: 0
                  #     seconds: "{{ states(in_num_transition_time_fast_ent) | int }}"
                  #     milliseconds: 0
                  # - if:
                  #     - condition: state
                  #       entity_id: !input light_target
                  #       state: "off"
                  #   then:
                  #     - service: light.turn_on
                  #       data:
                  #         brightness_pct: 1
                  #       target:
                  #         entity_id: !input light_target
                  - if:
                      - condition: time
                        before: !input in_datetime_night_time
                        after: !input in_datetime_day_time
                        alias: Time condition day
                    then:
                      - service: timer.start
                        data:
                          duration:
                            "{{ (states(in_num_dim_light_day_ent)|int)|timestamp_custom('%H:%M:%S',
                            false) }}"
                        target:
                          entity_id: !input timer_dim_to_off
                    else:
                      - if:
                          - condition: time
                            before: !input in_datetime_day_time
                            after: !input in_datetime_night_time
                            alias: Time condition night
                        then:
                          - service: timer.start
                            data:
                              duration:
                                "{{ (states(in_num_dim_light_night_ent)|int)|timestamp_custom('%H:%M:%S',
                                false) }}"
                            target:
                              entity_id: !input timer_dim_to_off
                        alias: Night condition
                enabled: true
          - conditions:
              - condition: trigger
                id:
                  - motion_stopped_to_off
            sequence:
              - if:
                  - condition: and
                    conditions:
                      - condition: state
                        entity_id: !input light_target
                        state: "on"
                then:
                  - service: light.turn_off
                    data:
                      transition: "{{ states(in_num_transition_time_ent) | int }}"
                    target:
                      entity_id: !input light_target
                  - if:
                      - condition: time
                        before: !input in_datetime_night_time
                        after: !input in_datetime_day_time
                        alias: Time condition day
                    then:
                      - service: timer.start
                        data:
                          duration:
                            "{{ (states(in_num_dim_light_day_ent)|int)|timestamp_custom('%H:%M:%S',
                            false) }}"
                        target:
                          entity_id: !input timer_dim_to_off
                    else:
                      - if:
                          - condition: time
                            before: !input in_datetime_day_time
                            after: !input in_datetime_night_time
                            alias: Time condition night
                        then:
                          - service: timer.start
                            data:
                              duration:
                                "{{ (states(in_num_dim_light_night_ent)|int)|timestamp_custom('%H:%M:%S',
                                false) }}"
                            target:
                              entity_id: !input timer_dim_to_off
                        alias: Night condition
                enabled: true
                else:
                  - stop:
                      Stopped because last timer expired with lights off and this is the
                      end of the automation.
          - conditions:
              - condition: trigger
                id: manual_off
            sequence:
              - service: timer.cancel
                data: {}
                target:
                  entity_id:
                    - !input timer_on_to_dim
                    - !input timer_dim_to_off
    alias: if boolean for automation enable is on
mode: single
