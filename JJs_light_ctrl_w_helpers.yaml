blueprint:
  name: ⚡💡 JJs Light Control With Helpers 💡⚡
  description: "
    ## Light control automation that has:

    - Two light scenes, one for day and night

    - Wont override the current light state if manually changed

    - Dims to show the lights are about to turn off

    - Time period after lights are off and motion is active to recover the last
    light state.

    - Fully customizable with the helpers

    - Controllable via other automations via using the helpers called with the
    blueprint


    ### Required helpers list

    - Please see the [readme.md](https://github.com/Jeffreyjelly/jjs_light_ctrl_with_helpers/blob/main/README.md)
    "
  domain: automation
  source_url: https://github.com/Jeffreyjelly/jjs_light_ctrl_with_helpers/blob/main/JJs_light_ctrl_w_helpers.yaml
  author: Jeffreyjelly
  input:
    light_target:
      name: Light
      description: '### 💡

      - Light or Light Group to Target'
      selector:
        entity:
          domain: light
    in_bool_auto_enable:
      name:  Input_boolean_enable
      description: '### 🔛
      
      - input_boolean helper for enabling and disabling this 
      automation'
      selector:
        entity:
          domain: input_boolean
    motion_detected_device:
      name: Motion_detection 
      description: '### 🕵️‍♂️🕵️‍♀️
      
      - A binary_sensor input that triggers the lights to turn 
      on.'
      selector:
        entity:
          domain: binary_sensor
    motion_not_detected_device:
      name:  Motion_not_detected 
      description: '### 🕵️‍♀️⛔ ⛔🕵️‍♂️

      - A binary_sensor that when triggered off starts the first motion to dim 
      timer.

      - Also will only work to keep lights on if either of the two timers are
      active when this gets turned to on again.
      '
      selector:
        entity:
          domain: binary_sensor
    timer_on_to_dim:
      name: Timer_for_motion_stopped_to_dim
      description: '### ⏲🌕>🌓
      
      - Timer used from no motion to dimmed state that is set via
      the automation.'
      selector:
        entity:
          domain: timer
    timer_dim_to_off:
      name: Timer_for_dimmed_to_off
      description: '### ⏲🌓>🌑

      - Timer used from dimmed to off state that is set via the automation.
      
      - Also used for time to recover last on state before reverting to scene 
      on the next turn on.
      '
      selector:
        entity:
          domain: timer
    in_num_perc_dimmed:
      name: Light_dimming_percentage
      description: '### 🌕>🌓%❔

      - input_number helper for choosing how much the lights dim
      
      - suggested range:

      > (-99 to -1)
      '
      selector:
        entity:
          domain: input_number
    in_num_on_light_day:
      name: No_motion_to_dim_in_seconds_day
      description: '### ⛔🕵️‍♂️>🌓⏲🌞

      - input_number helper for no motion to dim to set the timer during the
      day in seconds.

      - suggested range:

      > (20s to 7200s)

      > or otherwise 20 seconds to 2 hours
      '
      selector:
        entity:
          domain: input_number
    in_num_on_light_night:
      name: No_motion_to_dim_in_seconds_night
      description: '### ⛔🕵️‍♂️>🌓⏲🌙

      - input_number helper for no motion to dim to set the timer during the
      night in seconds.

      - suggested range:

      > (20s to 7200s)

      > or otherwise 20 seconds to 2 hours
      '
      selector:
        entity:
          domain: input_number
    in_num_dim_light_day:
      name: Dimmed_to_off_in_seconds_day
      description: '### 🌓>🌑⏲🌞

      - input_number helper for dimmed to off to set the timer during the day
      in seconds.

      - suggested range:

      > (10s to 1800s)

      > or otherwise 10 seconds to 30 minutes
      '
      selector:
        entity:
          domain: input_number
    in_num_dim_light_night:
      name: Dimmed_to_off_in_seconds_night
      description: '### 🌓>🌑⏲🌙
      
      - input_number helper for dimmed to off to set the timer during the night
      in seconds.

      - suggested range:

      > (10s to 1800s)

      > or otherwise 10 seconds to 30 minutes
      '
      selector:
        entity:
          domain: input_number
    #input_number for transition time for light turning on
    in_num_transition_time:
      name: Light_on_transition_time_normal
      description: '### 💡🆙⏳
      
      - input_number helper for light transitioning on and off in seconds
      
      - suggested range:

      > (1s to 10s)
      '
      selector:
        entity:
          domain: input_number
    in_num_transition_time_fast:
      name: Light_on_transition_time_fast
      description: '### 💡🆙⏳⏩

      - input_number helper for light transitioning to and from dimmed states
      in seconds. (you&rsquo;ll want this fast to see the transition)
      
      - suggested range:

      > (1s to 3s)
      '
      selector:
        entity:
          domain: input_number
    in_datetime_day_time:
      name: Datetime_start_for_day_scene
      description: '### 📅⌚🌞
      
      - input_datetime helper start time for activating the day 
      scene selected below.'
      selector:
        entity:
          domain: input_datetime
    in_datetime_night_time:
      name: Datetime_start_for_night_scene
      description: '### 📅⌚🌙
      
      - input_datetime helper start time for activating the day 
      scene selected below.'
      selector:
        entity:
          domain: input_datetime
    scene_day_light:
      name: Day_scene
      description: '### 🌞🎨
      
      - scene for the day setting.'
      selector:
        entity:
          domain: scene
    #scene setting for night
    scene_night_light:
      name: Night_scene_for_the_lights.
      description: '### 🌙🎨
      
      - scene for the night setting.'
      selector:
        entity:
          domain: scene
    temp_scene_name:
      name: Temporary_scene_name
      description: '### 🎨🎈
      
      - Temporary scene name that will be created to recover the
      last on state 
      
      > (make sure it&rsquo;s unique and doesn&rsquo;t already exist)
      '
      default: "jjs_recovery_scene_for_zone_"

variables:
  #   light_target_ent: !input "light_target"
  #   in_bool_auto_enable_ent: !input "in_bool_auto_enable"
  #   motion_detected_device_ent: !input "motion_detected_device"
  #   motion_not_detected_device_ent: !input "motion_not_detected_device"
  #   timer_on_to_dim_ent: !input "timer_on_to_dim"
  #   timer_dim_to_off_ent: !input "timer_dim_to_off"
  in_num_perc_dimmed_ent: !input "in_num_perc_dimmed"
  in_num_on_light_day_ent: !input "in_num_on_light_day"
  in_num_on_light_night_ent: !input "in_num_on_light_night"
  in_num_dim_light_day_ent: !input "in_num_dim_light_day"
  in_num_dim_light_night_ent: !input "in_num_dim_light_night"
  in_num_transition_time_ent: !input "in_num_transition_time"
  in_num_transition_time_fast_ent: !input "in_num_transition_time_fast"
  #   in_datetime_day_time_ent: !input "in_datetime_day_time"
  #   scene_day_light_ent: !input "scene_day_light"
  #   in_datetime_night_time_ent: !input "in_datetime_night_time"
  #   scene_night_light_ent: !input "scene_night_light"
  temp_scene_name_ent: !input "temp_scene_name"

alias: hallway new test
description: ""
trigger:
  - platform: state
    entity_id: !input motion_detected_device
    from: "off"
    to: "on"
    id: motion_detected
    alias: motion_detected_device > motion_detected
  - platform: state
    entity_id: !input motion_not_detected_device
    to: "off"
    id: motion_stopped
    alias: motion_not_detected_device  > motion_stopped
  - platform: state
    entity_id: !input motion_not_detected_device
    to: "on"
    id: motion_stopped_canceled
    alias: motion_not_detected_device > motion_stopped_canceled
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input "timer_on_to_dim"
    id: motion_stopped_to_dim
    alias: timer_on_to_dim finished > motion_stopped_to_dim
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input "timer_dim_to_off"
    id: motion_stopped_to_off
    alias: timer_dim_to_off finished > motion_stopped_to_off
condition: []
action:
  - if:
      - condition: state
        entity_id: !input "in_bool_auto_enable"
        state: "on"
    then:
      - choose:
          - conditions:
              - condition: trigger
                id: motion_detected
            sequence:
              - if:
                  - condition: and
                    conditions:
                      - condition: state
                        entity_id: !input "light_target"
                        state: "off"
                      - condition: state
                        entity_id: !input "timer_on_to_dim"
                        state: idle
                      - condition: state
                        entity_id: !input "timer_dim_to_off"
                        state: idle
                then:
                  - if:
                      - condition: time
                        before: !input "in_datetime_night_time"
                        after: !input "in_datetime_day_time"
                        alias: Time condition day
                    then:
                      - service: scene.turn_on
                        target:
                          entity_id: !input "scene_day_light"
                        data:
                          transition: >-
                            {{states(in_num_transition_time_ent) | int }}
                        metadata: {}
                    else:
                      - if:
                          - condition: time
                            before: !input "in_datetime_day_time"
                            after: !input "in_datetime_night_time"
                            alias: Time condition night
                        then:
                          - service: scene.turn_on
                            target:
                              entity_id: !input "scene_night_light"
                            data:
                              transition: >-
                                {{ states(in_num_transition_time_ent)| int }}
                            metadata: {}
                        alias: Night path
                    alias: Set light scene since lights were off
                else:
                  - if:
                      - condition: state
                        entity_id: !input "timer_dim_to_off"
                        state: active
                    then:
                      - service: scene.turn_on
                        data:
                          transition: >-
                            {{ states(in_num_transition_time_fast_ent) | int }}
                        target:
                          entity_id:
                            - scene.{{ temp_scene_name_ent }}
                      - service: timer.cancel
                        data: {}
                        target:
                          entity_id: !input "timer_dim_to_off"
                    alias: >-
                      if timer dim_to_off is active revert to saved scene else,
                      clear out the on_to_dim timer
                    else:
                      - service: timer.cancel
                        data: {}
                        target:
                          entity_id: !input "timer_on_to_dim"
                alias: >-
                  if all lights are off and all timers are idle set scene else,
                  recover scene
          - conditions:
              - condition: trigger
                id:
                  - motion_stopped
            sequence:
              - if:
                  - condition: time
                    before: !input "in_datetime_night_time"
                    after: !input "in_datetime_day_time"
                    alias: Time condition day
                then:
                  - service: timer.start
                    data:
                      duration: >-
                        {{
                        (states(in_num_on_light_day_ent)|int
                        )|timestamp_custom('%H:%M:%S', false) }}
                    target:
                      entity_id: !input "timer_on_to_dim"
                else:
                  - if:
                      - condition: time
                        before: !input "in_datetime_day_time"
                        after: !input "in_datetime_night_time"
                        alias: Time condition night
                    then:
                      - service: timer.start
                        data:
                          duration: >-
                            {{
                            (states(in_num_on_light_night_ent)|int)|timestamp_custom('%H:%M:%S',
                            false) }}
                        target:
                          entity_id: !input "timer_on_to_dim"
                    alias: Night condition
                alias: startup on_to_dim timer based on day
          - conditions:
              - condition: trigger
                id:
                  - motion_stopped_canceled
            sequence:
              - if:
                  - condition: state
                    entity_id: !input "timer_dim_to_off"
                    state: active
                then:
                  - service: scene.turn_on
                    data:
                      transition: >-
                        {{ states(in_num_transition_time_fast_ent) |
                        int }}
                    target:
                      entity_id:
                        - scene.{{ temp_scene_name_ent }}
                  - service: timer.cancel
                    data: {}
                    target:
                      entity_id: !input "timer_dim_to_off"
                alias: >-
                  if timer dim_to_off is active revert to saved scene and cancel
                  timer else, cancel the on_to_dim timer
                else:
                  - service: timer.cancel
                    data: {}
                    target:
                      entity_id: !input "timer_on_to_dim"
          - conditions:
              - condition: trigger
                id:
                  - motion_stopped_to_dim
            sequence:
              - if:
                  - condition: and
                    conditions:
                      - condition: state
                        entity_id: !input "light_target"
                        state: "on"
                      - condition: state
                        entity_id: !input "timer_on_to_dim"
                        state: idle
                then:
                  - service: scene.create
                    data:
                      snapshot_entities: !input "light_target"
                      scene_id: !input "temp_scene_name"
                    enabled: true
                  - delay:
                      hours: 0
                      minutes: 0
                      seconds: 0
                      milliseconds: 100
                  - service: light.turn_on
                    data:
                      brightness_step_pct: >-
                        {{ states(in_num_perc_dimmed_ent) |
                        int }}
                      transition: >-
                        {{ states(in_num_transition_time_fast_ent) |
                        int }}
                    target:
                      entity_id: !input "light_target"
                  - delay:
                      hours: 0
                      minutes: 0
                      seconds: >-
                        {{ states(in_num_transition_time_fast_ent) |
                        int }}
                      milliseconds: 0
                  - if:
                      - condition: state
                        entity_id: !input "light_target"
                        state: "off"
                    then:
                      - service: light.turn_on
                        data:
                          brightness_pct: 1
                        target:
                          entity_id: !input "light_target"
                  - if:
                      - condition: time
                        before: !input "in_datetime_night_time"
                        after: !input "in_datetime_day_time"
                        alias: Time condition day
                    then:
                      - service: timer.start
                        data:
                          duration: >-
                            {{
                            (states(in_num_dim_light_day_ent)|int)|timestamp_custom('%H:%M:%S',
                            false) }}
                        target:
                          entity_id: !input "timer_dim_to_off"
                    else:
                      - if:
                          - condition: time
                            before: !input "in_datetime_day_time"
                            after: !input "in_datetime_night_time"
                            alias: Time condition night
                        then:
                          - service: timer.start
                            data:
                              duration: >-
                                {{
                                (states(in_num_dim_light_night_ent)|int)|timestamp_custom('%H:%M:%S',
                                false) }}
                            target:
                              entity_id: !input "timer_dim_to_off"
                        alias: Night condition
                enabled: true
          - conditions:
              - condition: trigger
                id:
                  - motion_stopped_to_off
            sequence:
              - if:
                  - condition: and
                    conditions:
                      - condition: state
                        entity_id: !input "light_target"
                        state: "on"
                then:
                  - service: light.turn_off
                    data:
                      transition: >-
                        {{ states(in_num_transition_time_ent) |
                        int }}
                    target:
                      entity_id: !input "light_target"
                  - if:
                      - condition: time
                        before: !input "in_datetime_night_time"
                        after: !input "in_datetime_day_time"
                        alias: Time condition day
                    then:
                      - service: timer.start
                        data:
                          duration: >-
                            {{
                            (states(in_num_dim_light_day_ent)|int)|timestamp_custom('%H:%M:%S', false) }}
                        target:
                          entity_id: !input "timer_dim_to_off"
                    else:
                      - if:
                          - condition: time
                            before: !input "in_datetime_day_time"
                            after: !input "in_datetime_night_time"
                            alias: Time condition night
                        then:
                          - service: timer.start
                            data:
                              duration: >-
                                {{
                                (states(in_num_dim_light_night_ent)|int)|timestamp_custom('%H:%M:%S',
                                false) }}
                            target:
                              entity_id: !input "timer_dim_to_off"
                        alias: Night condition
                enabled: true
                else:
                  - stop: >-
                      Stopped because last timer expired with lights off and
                      this is the end of the automation.
    alias: if boolean for automation enable is on
mode: single
